generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  password         String
  role             String   @default("user")
  name             String?
  avatarUrl        String?
  twoFactorEnabled Boolean  @default(false)
  twoFactorSecret  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  items            Item[]
  orders           Order[]
}

model Item {
  id          String    @id @default(cuid())
  name        String
  sku         String    @unique
  quantity    Int       @default(0)
  priceCents  Int       @default(0)
  imageUrl    String?
  description String?
  ownerId     String?
  owner       User?     @relation(fields: [ownerId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItems  OrderItem[]
  alerts      Alert[]
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  status      OrderStatus @default(PENDING)
  totalCents  Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
  shipments   Shipment[]
}

model OrderItem {
  id         String @id @default(cuid())
  orderId    String
  order      Order  @relation(fields: [orderId], references: [id])
  itemId     String
  item       Item   @relation(fields: [itemId], references: [id])
  quantity   Int
  priceCents Int
}

model Shipment {
  id                String   @id @default(cuid())
  orderId           String
  order             Order    @relation(fields: [orderId], references: [id])
  carrier           String
  trackingNumber    String
  destination       String
  status            String   @default("Processing")
  shippedDate       DateTime?
  estimatedDelivery DateTime?
  createdAt         DateTime @default(now())
}

model Alert {
  id           String     @id @default(cuid())
  type         AlertType
  message      String
  itemId       String?
  item         Item?      @relation(fields: [itemId], references: [id])
  severity     Severity   @default(LOW)
  acknowledged Boolean    @default(false)
  createdAt    DateTime   @default(now())
}

model SystemSetting {
  key       String  @id
  value     String
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum AlertType {
  LOW_STOCK
  OUT_OF_STOCK
  ORDER_CREATED
  ORDER_STATUS_CHANGED
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
} 