generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(cuid())
  email            String        @unique
  password         String
  role             String        @default("user")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  avatarUrl        String?
  name             String?
  phoneNumber      String?
  twoFactorEnabled Boolean       @default(false)
  twoFactorSecret  String?
  items            Item[]
  orders           Order[]
  sessions         UserSession[]
  invitationsSent  InvitationToken[] @relation("UserInvitations")
  notifications    Notification[]
}

model Item {
  id          String      @id @default(cuid())
  name        String
  sku         String      @unique
  quantity    Int         @default(0)
  priceCents  Int         @default(0)
  imageUrl    String?
  description String?
  ownerId     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  alerts      Alert[]
  owner       User?       @relation(fields: [ownerId], references: [id])
  orderItems  OrderItem[]
  supplierId  String?
  categoryId  String?
  supplier    Supplier?    @relation(fields: [supplierId], references: [id])
  category    Category?    @relation(fields: [categoryId], references: [id])
  logs        InventoryLog[]
  reorderLevel Int         @default(10)

  @@index([name])
  @@index([sku])
  @@index([quantity])
  @@index([ownerId])
  @@index([updatedAt])
  @@index([name, sku, description])
  @@index([supplierId])
  @@index([categoryId])
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  userId      String
  status      OrderStatus @default(PENDING)
  totalCents  Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  shipments   Shipment[]
  supplierId  String?
  supplier    Supplier?   @relation(fields: [supplierId], references: [id])

  @@index([createdAt])
  @@index([status])
  @@index([supplierId])
}

model OrderItem {
  id         String @id @default(cuid())
  orderId    String
  itemId     String
  quantity   Int
  priceCents Int
  item       Item   @relation(fields: [itemId], references: [id])
  order      Order  @relation(fields: [orderId], references: [id])

  @@index([itemId])
  @@index([orderId])
}

model Shipment {
  id                String    @id @default(cuid())
  orderId           String
  carrier           String
  trackingNumber    String
  destination       String
  status            String    @default("Processing")
  shippedDate       DateTime?
  estimatedDelivery DateTime?
  deliveredDate     DateTime?
  createdAt         DateTime  @default(now())
  order             Order     @relation(fields: [orderId], references: [id])
  events            ShipmentEvent[]

  @@index([status])
  @@index([createdAt])
}

model Alert {
  id           String    @id @default(cuid())
  type         AlertType
  message      String
  itemId       String?
  severity     Severity  @default(LOW)
  acknowledged Boolean   @default(false)
  new          Boolean   @default(true)
  createdAt    DateTime  @default(now())
  item         Item?     @relation(fields: [itemId], references: [id])
}

model SystemSetting {
  key       String   @id
  value     String
  updatedAt DateTime @updatedAt
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  ipAddress    String
  userAgent    String
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([lastActivity])
}

model InvitationToken {
  id          String   @id @default(cuid())
  email       String
  role        String   @default("user")
  token       String   @unique
  accepted    Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  invitedById String?
  invitedBy   User?    @relation("UserInvitations", fields: [invitedById], references: [id])

  @@index([email])
  @@index([token])
  @@index([expiresAt])
}

// New Models

model Supplier {
  id          String   @id @default(cuid())
  name        String
  contactInfo String?
  email       String?  @unique
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       Item[]
  orders      Order[]
  @@index([name])
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     Item[]
}

model InventoryLog {
  id          String   @id @default(cuid())
  itemId      String
  delta       Int
  reason      String
  referenceId String?
  createdAt   DateTime @default(now())
  item        Item     @relation(fields: [itemId], references: [id])
  @@index([itemId])
  @@index([createdAt])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  @@index([userId, read])
  @@index([createdAt])
}

model ShipmentEvent {
  id         String   @id @default(cuid())
  shipmentId String
  status     String
  location   String?
  note       String?
  createdAt  DateTime @default(now())
  shipment   Shipment @relation(fields: [shipmentId], references: [id])
  @@index([shipmentId])
  @@index([createdAt])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum AlertType {
  LOW_STOCK
  OUT_OF_STOCK
  ORDER_CREATED
  ORDER_STATUS_CHANGED
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}