generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String?
  lastName    String?
  role        UserRole @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items       Item[]
  orders      Order[]
  activities  Activity[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items       Item[]

  @@map("categories")
}

model Supplier {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items       Item[]

  @@map("suppliers")
}

model Item {
  id          String      @id @default(cuid())
  name        String
  sku         String      @unique
  description String?
  quantity    Int         @default(0)
  minStock    Int         @default(10)
  maxStock    Int         @default(100)
  price       Float       @default(0)
  location    String?
  status      ItemStatus  @default(ACTIVE)
  imageUrl    String?
  
  // Foreign keys
  categoryId  String?
  supplierId  String?
  ownerId     String?
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  category    Category?   @relation(fields: [categoryId], references: [id])
  supplier    Supplier?   @relation(fields: [supplierId], references: [id])
  owner       User?       @relation(fields: [ownerId], references: [id])
  orderItems  OrderItem[]
  activities  Activity[]

  @@map("items")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  totalAmount Float       @default(0)
  notes       String?
  
  // Foreign keys
  userId      String
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  shipments   Shipment[]

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  quantity    Int
  price       Float
  
  // Foreign keys
  orderId     String
  itemId      String
  
  createdAt   DateTime @default(now())

  // Relations
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  item        Item     @relation(fields: [itemId], references: [id])

  @@map("order_items")
}

model Shipment {
  id            String         @id @default(cuid())
  trackingNumber String        @unique
  status        ShipmentStatus @default(PREPARING)
  shippedAt     DateTime?
  deliveredAt   DateTime?
  carrier       String?
  address       String
  
  // Foreign keys
  orderId       String
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  order         Order          @relation(fields: [orderId], references: [id])

  @@map("shipments")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?
  
  // Foreign keys
  userId      String?
  itemId      String?
  
  createdAt   DateTime     @default(now())

  // Relations
  user        User?        @relation(fields: [userId], references: [id])
  item        Item?        @relation(fields: [itemId], references: [id])

  @@map("activities")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum ItemStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ShipmentStatus {
  PREPARING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  FAILED
}

enum ActivityType {
  ITEM_CREATED
  ITEM_UPDATED
  ITEM_DELETED
  STOCK_UPDATED
  ORDER_CREATED
  ORDER_UPDATED
  SHIPMENT_CREATED
  USER_LOGIN
}